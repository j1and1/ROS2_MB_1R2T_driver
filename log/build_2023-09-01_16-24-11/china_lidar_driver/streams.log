[0.018s] Invoking command in '/workspaces/gh_mk2/build/china_lidar_driver': CMAKE_PREFIX_PATH=/opt/ros/humble /usr/bin/cmake --build /workspaces/gh_mk2/build/china_lidar_driver -- -j12 -l12
[0.072s] [35m[1mConsolidate compiler generated dependencies of target data_reader[0m
[0.093s] [ 66%] [32mBuilding CXX object CMakeFiles/data_reader.dir/src/lidar_interaction.cpp.o[0m
[0.093s] [ 66%] [32mBuilding CXX object CMakeFiles/data_reader.dir/src/data_reader.cpp.o[0m
[3.573s] [01m[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:[m[K In member function â€˜[01m[Kvoid DataReader::createLaserScanMessage(const std::vector<ChinaLidar::Vector2D>&)[m[Kâ€™:
[3.573s] [01m[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:79:26:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Kstd::vector<ChinaLidar::Vector2D>::size_type[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare-Wsign-compare]8;;[m[K]
[3.574s]    79 |         for(int i = 0; [01;35m[Ki < points.size()[m[K; i++)
[3.574s]       |                        [01;35m[K~~^~~~~~~~~~~~~~~[m[K
[4.298s] In file included from [01m[K/usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h:33[m[K,
[4.299s]                  from [01m[K/usr/include/c++/11/bits/allocator.h:46[m[K,
[4.299s]                  from [01m[K/usr/include/c++/11/memory:64[m[K,
[4.299s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153[m[K,
[4.299s]                  from [01m[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:1[m[K:
[4.299s] /usr/include/c++/11/ext/new_allocator.h: In instantiation of â€˜[01m[Kvoid __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = ChinaLidar::LidarInteraction; _Args = {std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Point2D, std::allocator<ChinaLidar::Point2D> >&)>&, std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Vector2D, std::allocator<ChinaLidar::Vector2D> >&)>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}; _Tp = ChinaLidar::LidarInteraction][m[Kâ€™:
[4.299s] [01m[K/usr/include/c++/11/bits/alloc_traits.h:516:17:[m[K   required from â€˜[01m[Kstatic void std::allocator_traits<std::allocator<_Tp1> >::construct(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*, _Args&& ...) [with _Up = ChinaLidar::LidarInteraction; _Args = {std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Point2D, std::allocator<ChinaLidar::Point2D> >&)>&, std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Vector2D, std::allocator<ChinaLidar::Vector2D> >&)>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}; _Tp = ChinaLidar::LidarInteraction; std::allocator_traits<std::allocator<_Tp1> >::allocator_type = std::allocator<ChinaLidar::LidarInteraction>][m[Kâ€™
[4.299s] [01m[K/usr/include/c++/11/bits/shared_ptr_base.h:519:39:[m[K   required from â€˜[01m[Kstd::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_Sp_counted_ptr_inplace(_Alloc, _Args&& ...) [with _Args = {std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Point2D, std::allocator<ChinaLidar::Point2D> >&)>&, std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Vector2D, std::allocator<ChinaLidar::Vector2D> >&)>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}; _Tp = ChinaLidar::LidarInteraction; _Alloc = std::allocator<ChinaLidar::LidarInteraction>; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic][m[Kâ€™
[4.299s] [01m[K/usr/include/c++/11/bits/shared_ptr_base.h:650:16:[m[K   required from â€˜[01m[Kstd::__shared_count<_Lp>::__shared_count(_Tp*&, std::_Sp_alloc_shared_tag<_Alloc>, _Args&& ...) [with _Tp = ChinaLidar::LidarInteraction; _Alloc = std::allocator<ChinaLidar::LidarInteraction>; _Args = {std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Point2D, std::allocator<ChinaLidar::Point2D> >&)>&, std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Vector2D, std::allocator<ChinaLidar::Vector2D> >&)>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic][m[Kâ€™
[4.299s] [01m[K/usr/include/c++/11/bits/shared_ptr_base.h:1342:14:[m[K   required from â€˜[01m[Kstd::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::_Sp_alloc_shared_tag<_Tp>, _Args&& ...) [with _Alloc = std::allocator<ChinaLidar::LidarInteraction>; _Args = {std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Point2D, std::allocator<ChinaLidar::Point2D> >&)>&, std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Vector2D, std::allocator<ChinaLidar::Vector2D> >&)>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}; _Tp = ChinaLidar::LidarInteraction; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic][m[Kâ€™
[4.300s] [01m[K/usr/include/c++/11/bits/shared_ptr.h:409:59:[m[K   required from â€˜[01m[Kstd::shared_ptr<_Tp>::shared_ptr(std::_Sp_alloc_shared_tag<_Tp>, _Args&& ...) [with _Alloc = std::allocator<ChinaLidar::LidarInteraction>; _Args = {std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Point2D, std::allocator<ChinaLidar::Point2D> >&)>&, std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Vector2D, std::allocator<ChinaLidar::Vector2D> >&)>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}; _Tp = ChinaLidar::LidarInteraction][m[Kâ€™
[4.300s] [01m[K/usr/include/c++/11/bits/shared_ptr.h:862:14:[m[K   required from â€˜[01m[Kstd::shared_ptr<_Tp> std::allocate_shared(const _Alloc&, _Args&& ...) [with _Tp = ChinaLidar::LidarInteraction; _Alloc = std::allocator<ChinaLidar::LidarInteraction>; _Args = {std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Point2D, std::allocator<ChinaLidar::Point2D> >&)>&, std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Vector2D, std::allocator<ChinaLidar::Vector2D> >&)>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}][m[Kâ€™
[4.300s] [01m[K/usr/include/c++/11/bits/shared_ptr.h:878:39:[m[K   required from â€˜[01m[Kstd::shared_ptr<_Tp> std::make_shared(_Args&& ...) [with _Tp = ChinaLidar::LidarInteraction; _Args = {std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Point2D, std::allocator<ChinaLidar::Point2D> >&)>&, std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Vector2D, std::allocator<ChinaLidar::Vector2D> >&)>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}][m[Kâ€™
[4.300s] [01m[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:32:75:[m[K   required from here
[4.300s] [01m[K/usr/include/c++/11/ext/new_allocator.h:162:11:[m[K [01;31m[Kerror: [m[Kcannot bind non-const lvalue reference of type â€˜[01m[KChinaLidar::LidarInteraction::PCCallback&[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(const std::vector<ChinaLidar::Point2D>&)>&[m[Kâ€™} to an rvalue of type â€˜[01m[KChinaLidar::LidarInteraction::PCCallback[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(const std::vector<ChinaLidar::Point2D>&)>[m[Kâ€™}
[4.300s]   162 |         { [01;31m[K::new((void *)__p) _Up(std::forward<_Args>(__args)...)[m[K; }
[4.300s]       |           [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[4.300s] In file included from [01m[K/usr/include/c++/11/future:47[m[K,
[4.300s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:18[m[K,
[4.300s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[4.300s]                  from [01m[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:1[m[K:
[4.301s] [01m[K/usr/include/c++/11/bits/std_function.h:435:9:[m[K [01;36m[Knote: [m[K  after user-defined conversion: â€˜[01m[Kstd::function<_Res(_ArgTypes ...)>::function(_Functor&&) [with _Functor = std::_Bind<void (DataReader::*(DataReader*, std::_Placeholder<1>))(const std::vector<ChinaLidar::Point2D>&)>&; _Constraints = void; _Res = void; _ArgTypes = {const std::vector<ChinaLidar::Point2D, std::allocator<ChinaLidar::Point2D> >&}][m[Kâ€™
[4.301s]   435 |         [01;36m[Kfunction[m[K(_Functor&& __f)
[4.301s]       |         [01;36m[K^~~~~~~~[m[K
[4.301s] In file included from [01m[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:6[m[K:
[4.301s] [01m[K/workspaces/gh_mk2/src/china_lidar_driver/include/china_lidar_driver/lidar_interaction.hpp:39:34:[m[K [01;36m[Knote: [m[K  initializing argument 1 of â€˜[01m[KChinaLidar::LidarInteraction::LidarInteraction(ChinaLidar::LidarInteraction::PCCallback&, ChinaLidar::LidarInteraction::ScanCallback&, const string&, uint32_t)[m[Kâ€™
[4.301s]    39 |     LidarInteraction([01;36m[KPCCallback& point_cloud_cb[m[K, ScanCallback& scan_cb
[4.301s]       |                      [01;36m[K~~~~~~~~~~~~^~~~~~~~~~~~~~[m[K
[4.853s] gmake[2]: *** [CMakeFiles/data_reader.dir/build.make:76: CMakeFiles/data_reader.dir/src/data_reader.cpp.o] Error 1
[4.853s] gmake[1]: *** [CMakeFiles/Makefile2:137: CMakeFiles/data_reader.dir/all] Error 2
[4.853s] gmake: *** [Makefile:146: all] Error 2
[4.855s] Invoked command in '/workspaces/gh_mk2/build/china_lidar_driver' returned '2': CMAKE_PREFIX_PATH=/opt/ros/humble /usr/bin/cmake --build /workspaces/gh_mk2/build/china_lidar_driver -- -j12 -l12
