[0.000000] (-) TimerEvent: {}
[0.000091] (china_lidar_driver) JobQueued: {'identifier': 'china_lidar_driver', 'dependencies': OrderedDict()}
[0.000118] (china_lidar_driver) JobStarted: {'identifier': 'china_lidar_driver'}
[0.009671] (china_lidar_driver) JobProgress: {'identifier': 'china_lidar_driver', 'progress': 'cmake'}
[0.010400] (china_lidar_driver) JobProgress: {'identifier': 'china_lidar_driver', 'progress': 'build'}
[0.011229] (china_lidar_driver) Command: {'cmd': ['/usr/bin/cmake', '--build', '/workspaces/gh_mk2/build/china_lidar_driver', '--', '-j12', '-l12'], 'cwd': '/workspaces/gh_mk2/build/china_lidar_driver', 'env': OrderedDict([('HOSTNAME', '9648a1ccd90b'), ('GIT_ASKPASS', '/vscode/vscode-server/bin/linux-x64/6c3e3dba23e8fadc360aed75ce363ba185c49794/extensions/git/dist/askpass.sh'), ('SHLVL', '2'), ('LD_LIBRARY_PATH', '/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('BROWSER', '/vscode/vscode-server/bin/linux-x64/6c3e3dba23e8fadc360aed75ce363ba185c49794/bin/helpers/browser.sh'), ('HOME', '/root'), ('TERM_PROGRAM_VERSION', '1.81.1'), ('VSCODE_IPC_HOOK_CLI', '/tmp/vscode-ipc-4cca7400-61b5-4687-b6cd-d766ba409024.sock'), ('ROS_PYTHON_VERSION', '3'), ('VSCODE_GIT_ASKPASS_MAIN', '/vscode/vscode-server/bin/linux-x64/6c3e3dba23e8fadc360aed75ce363ba185c49794/extensions/git/dist/askpass-main.js'), ('VSCODE_GIT_ASKPASS_NODE', '/vscode/vscode-server/bin/linux-x64/6c3e3dba23e8fadc360aed75ce363ba185c49794/node'), ('COLORTERM', 'truecolor'), ('REMOTE_CONTAINERS', 'true'), ('ROS_DISTRO', 'humble'), ('REMOTE_CONTAINERS_IPC', '/tmp/vscode-remote-containers-ipc-54405e10-2712-4e91-b6ef-4a964491a7f7.sock'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('TERM', 'xterm-256color'), ('ROS_LOCALHOST_ONLY', '1'), ('PATH', '/vscode/vscode-server/bin/linux-x64/6c3e3dba23e8fadc360aed75ce363ba185c49794/bin/remote-cli:/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'), ('REMOTE_CONTAINERS_SOCKETS', '["/tmp/vscode-ssh-auth-54405e10-2712-4e91-b6ef-4a964491a7f7.sock","/tmp/.X11-unix/X0","/root/.gnupg/S.gpg-agent"]'), ('DISPLAY', ':2'), ('LANG', 'C.UTF-8'), ('RMW_IMPLEMENTATION', 'rmw_cyclonedds_cpp'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('VSCODE_GIT_IPC_HANDLE', '/tmp/vscode-git-97e2ea5ab1.sock'), ('TERM_PROGRAM', 'vscode'), ('SSH_AUTH_SOCK', '/tmp/vscode-ssh-auth-54405e10-2712-4e91-b6ef-4a964491a7f7.sock'), ('ROS_DOMAIN_ID', '42'), ('AMENT_PREFIX_PATH', '/opt/ros/humble'), ('REMOTE_CONTAINERS_DISPLAY_SOCK', '/tmp/.X11-unix/X0'), ('SHELL', '/bin/bash'), ('VSCODE_GIT_ASKPASS_EXTRA_ARGS', ''), ('PWD', '/workspaces/gh_mk2/build/china_lidar_driver'), ('LC_ALL', 'C.UTF-8'), ('PYTHONPATH', '/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('CMAKE_PREFIX_PATH', '/opt/ros/humble')]), 'shell': False}
[0.046213] (china_lidar_driver) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target data_reader\x1b[0m\n'}
[0.061098] (china_lidar_driver) StdoutLine: {'line': b'[ 66%] \x1b[32mBuilding CXX object CMakeFiles/data_reader.dir/src/lidar_interaction.cpp.o\x1b[0m\n'}
[0.061236] (china_lidar_driver) StdoutLine: {'line': b'[ 66%] \x1b[32mBuilding CXX object CMakeFiles/data_reader.dir/src/data_reader.cpp.o\x1b[0m\n'}
[0.099240] (-) TimerEvent: {}
[0.199451] (-) TimerEvent: {}
[0.299693] (-) TimerEvent: {}
[0.320964] (china_lidar_driver) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/src/lidar_interaction.cpp:1\x1b[m\x1b[K:\n'}
[0.321142] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/include/china_lidar_driver/lidar_interaction.hpp:64:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kfield \xe2\x80\x98\x1b[01m\x1b[Kon_point_cloud_received\x1b[m\x1b[K\xe2\x80\x99 has incomplete type \xe2\x80\x98\x1b[01m\x1b[KChinaLidar::LidarInteraction::PCCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<std::vector<ChinaLidar::Point2D> >\x1b[m\x1b[K\xe2\x80\x99}\n'}
[0.321206] (china_lidar_driver) StderrLine: {'line': b'   64 |     PCCallback \x1b[01;31m\x1b[Kon_point_cloud_received\x1b[m\x1b[K;\n'}
[0.321259] (china_lidar_driver) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.321309] (china_lidar_driver) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[0.321359] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/include/china_lidar_driver/lidar_interaction.hpp:6\x1b[m\x1b[K,\n'}
[0.321409] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/src/lidar_interaction.cpp:1\x1b[m\x1b[K:\n'}
[0.321457] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:111:11:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclaration of \xe2\x80\x98\x1b[01m\x1b[KChinaLidar::LidarInteraction::PCCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kclass std::function<std::vector<ChinaLidar::Point2D> >\x1b[m\x1b[K\xe2\x80\x99}\n'}
[0.321506] (china_lidar_driver) StderrLine: {'line': b'  111 |     class \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K;\n'}
[0.321555] (china_lidar_driver) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[0.321604] (china_lidar_driver) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/src/lidar_interaction.cpp:1\x1b[m\x1b[K:\n'}
[0.321653] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/include/china_lidar_driver/lidar_interaction.hpp:65:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kfield \xe2\x80\x98\x1b[01m\x1b[Kon_scan_data_received\x1b[m\x1b[K\xe2\x80\x99 has incomplete type \xe2\x80\x98\x1b[01m\x1b[KChinaLidar::LidarInteraction::ScanCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<std::vector<ChinaLidar::Vector2D> >\x1b[m\x1b[K\xe2\x80\x99}\n'}
[0.321703] (china_lidar_driver) StderrLine: {'line': b'   65 |     ScanCallback \x1b[01;31m\x1b[Kon_scan_data_received\x1b[m\x1b[K;\n'}
[0.321751] (china_lidar_driver) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[0.321799] (china_lidar_driver) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[0.321846] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/include/china_lidar_driver/lidar_interaction.hpp:6\x1b[m\x1b[K,\n'}
[0.321899] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/src/lidar_interaction.cpp:1\x1b[m\x1b[K:\n'}
[0.321947] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:111:11:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclaration of \xe2\x80\x98\x1b[01m\x1b[KChinaLidar::LidarInteraction::ScanCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kclass std::function<std::vector<ChinaLidar::Vector2D> >\x1b[m\x1b[K\xe2\x80\x99}\n'}
[0.321997] (china_lidar_driver) StderrLine: {'line': b'  111 |     class \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K;\n'}
[0.322044] (china_lidar_driver) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[0.354161] (china_lidar_driver) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/data_reader.dir/build.make:90: CMakeFiles/data_reader.dir/src/lidar_interaction.cpp.o] Error 1\n'}
[0.354287] (china_lidar_driver) StderrLine: {'line': b'gmake[2]: *** Waiting for unfinished jobs....\n'}
[0.399815] (-) TimerEvent: {}
[0.500053] (-) TimerEvent: {}
[0.600406] (-) TimerEvent: {}
[0.701018] (-) TimerEvent: {}
[0.801233] (-) TimerEvent: {}
[0.901462] (-) TimerEvent: {}
[1.001786] (-) TimerEvent: {}
[1.102254] (-) TimerEvent: {}
[1.202710] (-) TimerEvent: {}
[1.303074] (-) TimerEvent: {}
[1.403440] (-) TimerEvent: {}
[1.503749] (-) TimerEvent: {}
[1.604071] (-) TimerEvent: {}
[1.704454] (-) TimerEvent: {}
[1.804703] (-) TimerEvent: {}
[1.904937] (-) TimerEvent: {}
[2.005211] (-) TimerEvent: {}
[2.105566] (-) TimerEvent: {}
[2.205935] (-) TimerEvent: {}
[2.306322] (-) TimerEvent: {}
[2.397809] (china_lidar_driver) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:6\x1b[m\x1b[K:\n'}
[2.398217] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/include/china_lidar_driver/lidar_interaction.hpp:64:16:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kfield \xe2\x80\x98\x1b[01m\x1b[Kon_point_cloud_received\x1b[m\x1b[K\xe2\x80\x99 has incomplete type \xe2\x80\x98\x1b[01m\x1b[KChinaLidar::LidarInteraction::PCCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<std::vector<ChinaLidar::Point2D> >\x1b[m\x1b[K\xe2\x80\x99}\n'}
[2.398363] (china_lidar_driver) StderrLine: {'line': b'   64 |     PCCallback \x1b[01;31m\x1b[Kon_point_cloud_received\x1b[m\x1b[K;\n'}
[2.398450] (china_lidar_driver) StderrLine: {'line': b'      |                \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.398531] (china_lidar_driver) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/future:47\x1b[m\x1b[K,\n'}
[2.398614] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:18\x1b[m\x1b[K,\n'}
[2.398696] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[2.398788] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:1\x1b[m\x1b[K:\n'}
[2.398869] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:111:11:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclaration of \xe2\x80\x98\x1b[01m\x1b[KChinaLidar::LidarInteraction::PCCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kclass std::function<std::vector<ChinaLidar::Point2D> >\x1b[m\x1b[K\xe2\x80\x99}\n'}
[2.398951] (china_lidar_driver) StderrLine: {'line': b'  111 |     class \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K;\n'}
[2.399052] (china_lidar_driver) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.399144] (china_lidar_driver) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:6\x1b[m\x1b[K:\n'}
[2.399231] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/include/china_lidar_driver/lidar_interaction.hpp:65:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kfield \xe2\x80\x98\x1b[01m\x1b[Kon_scan_data_received\x1b[m\x1b[K\xe2\x80\x99 has incomplete type \xe2\x80\x98\x1b[01m\x1b[KChinaLidar::LidarInteraction::ScanCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<std::vector<ChinaLidar::Vector2D> >\x1b[m\x1b[K\xe2\x80\x99}\n'}
[2.399323] (china_lidar_driver) StderrLine: {'line': b'   65 |     ScanCallback \x1b[01;31m\x1b[Kon_scan_data_received\x1b[m\x1b[K;\n'}
[2.399403] (china_lidar_driver) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.399483] (china_lidar_driver) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/future:47\x1b[m\x1b[K,\n'}
[2.399562] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:18\x1b[m\x1b[K,\n'}
[2.399643] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[2.399732] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:1\x1b[m\x1b[K:\n'}
[2.399814] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:111:11:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclaration of \xe2\x80\x98\x1b[01m\x1b[KChinaLidar::LidarInteraction::ScanCallback\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kclass std::function<std::vector<ChinaLidar::Vector2D> >\x1b[m\x1b[K\xe2\x80\x99}\n'}
[2.399897] (china_lidar_driver) StderrLine: {'line': b'  111 |     class \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K;\n'}
[2.399977] (china_lidar_driver) StderrLine: {'line': b'      |           \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[2.406449] (-) TimerEvent: {}
[2.417947] (china_lidar_driver) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/pstl/glue_algorithm_defs.h:13\x1b[m\x1b[K,\n'}
[2.418274] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/algorithm:74\x1b[m\x1b[K,\n'}
[2.418433] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:18\x1b[m\x1b[K,\n'}
[2.418538] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[2.418625] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[2.418710] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[2.418796] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:1\x1b[m\x1b[K:\n'}
[2.418880] (china_lidar_driver) StderrLine: {'line': b'/usr/include/c++/11/functional: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct std::_Bind_check_arity<sensor_msgs::msg::PointCloud2_<std::allocator<void> > (DataReader::*)(), DataReader*, const std::_Placeholder<1>&>\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.418970] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:768:12:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct std::_Bind_helper<false, sensor_msgs::msg::PointCloud2_<std::allocator<void> > (DataReader::*)(), DataReader*, const std::_Placeholder<1>&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.419095] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:789:5:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Func, class ... _BoundArgs> typename std::_Bind_helper<std::__is_socketlike<_Func>::value, _Func, _BoundArgs ...>::type std::bind(_Func&&, _BoundArgs&& ...) [with _Func = sensor_msgs::msg::PointCloud2_<std::allocator<void> > (DataReader::*)(); _BoundArgs = {DataReader*, const std::_Placeholder<1>&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.419203] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:30:37:\x1b[m\x1b[K   required from here\n'}
[2.419285] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:756:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kstatic assertion failed: Wrong number of arguments for pointer-to-member\n'}
[2.419368] (china_lidar_driver) StderrLine: {'line': b'  755 |       static_assert(_Varargs::\x1b[01;31m\x1b[Kvalue\x1b[m\x1b[K\n'}
[2.419449] (china_lidar_driver) StderrLine: {'line': b'      |                               \x1b[01;31m\x1b[K~~~~~\x1b[m\x1b[K\n'}
[2.419529] (china_lidar_driver) StderrLine: {'line': b'  756 | \x1b[01;31m\x1b[K                    ? sizeof...(_BoundArgs) >= _Arity::value + 1\x1b[m\x1b[K\n'}
[2.419609] (china_lidar_driver) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.419693] (china_lidar_driver) StderrLine: {'line': b'  757 | \x1b[01;31m\x1b[K                    : sizeof...(_BoundArgs) == _Arity::value + 1\x1b[m\x1b[K,\n'}
[2.419773] (china_lidar_driver) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.419854] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:756:21:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[K(false ? (2 >= (((long unsigned int)std::integral_constant<long unsigned int, 0>::value) + 1)) : (2 == (((long unsigned int)std::integral_constant<long unsigned int, 0>::value) + 1)))\x1b[m\x1b[K\xe2\x80\x99 evaluates to false\n'}
[2.424126] (china_lidar_driver) StderrLine: {'line': b'/usr/include/c++/11/functional: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct std::_Bind_check_arity<sensor_msgs::msg::LaserScan_<std::allocator<void> > (DataReader::*)(), DataReader*, const std::_Placeholder<1>&>\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.424329] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:768:12:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct std::_Bind_helper<false, sensor_msgs::msg::LaserScan_<std::allocator<void> > (DataReader::*)(), DataReader*, const std::_Placeholder<1>&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.424444] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:789:5:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Func, class ... _BoundArgs> typename std::_Bind_helper<std::__is_socketlike<_Func>::value, _Func, _BoundArgs ...>::type std::bind(_Func&&, _BoundArgs&& ...) [with _Func = sensor_msgs::msg::LaserScan_<std::allocator<void> > (DataReader::*)(); _BoundArgs = {DataReader*, const std::_Placeholder<1>&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.424541] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:31:37:\x1b[m\x1b[K   required from here\n'}
[2.424625] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:756:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kstatic assertion failed: Wrong number of arguments for pointer-to-member\n'}
[2.424712] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/functional:756:21:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[K(false ? (2 >= (((long unsigned int)std::integral_constant<long unsigned int, 0>::value) + 1)) : (2 == (((long unsigned int)std::integral_constant<long unsigned int, 0>::value) + 1)))\x1b[m\x1b[K\xe2\x80\x99 evaluates to false\n'}
[2.506618] (-) TimerEvent: {}
[2.606987] (-) TimerEvent: {}
[2.707345] (-) TimerEvent: {}
[2.807638] (-) TimerEvent: {}
[2.849008] (china_lidar_driver) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h:33\x1b[m\x1b[K,\n'}
[2.849305] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/allocator.h:46\x1b[m\x1b[K,\n'}
[2.849392] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/memory:64\x1b[m\x1b[K,\n'}
[2.849472] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153\x1b[m\x1b[K,\n'}
[2.849549] (china_lidar_driver) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:1\x1b[m\x1b[K:\n'}
[2.849625] (china_lidar_driver) StderrLine: {'line': b'/usr/include/c++/11/ext/new_allocator.h: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = ChinaLidar::LidarInteraction; _Args = {std::_Bind<sensor_msgs::msg::PointCloud2_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, std::_Bind<sensor_msgs::msg::LaserScan_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}; _Tp = ChinaLidar::LidarInteraction]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.849708] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/alloc_traits.h:516:17:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic void std::allocator_traits<std::allocator<_Tp1> >::construct(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*, _Args&& ...) [with _Up = ChinaLidar::LidarInteraction; _Args = {std::_Bind<sensor_msgs::msg::PointCloud2_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, std::_Bind<sensor_msgs::msg::LaserScan_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}; _Tp = ChinaLidar::LidarInteraction; std::allocator_traits<std::allocator<_Tp1> >::allocator_type = std::allocator<ChinaLidar::LidarInteraction>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.849796] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:519:39:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_Sp_counted_ptr_inplace(_Alloc, _Args&& ...) [with _Args = {std::_Bind<sensor_msgs::msg::PointCloud2_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, std::_Bind<sensor_msgs::msg::LaserScan_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}; _Tp = ChinaLidar::LidarInteraction; _Alloc = std::allocator<ChinaLidar::LidarInteraction>; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.849888] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:650:16:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::__shared_count<_Lp>::__shared_count(_Tp*&, std::_Sp_alloc_shared_tag<_Alloc>, _Args&& ...) [with _Tp = ChinaLidar::LidarInteraction; _Alloc = std::allocator<ChinaLidar::LidarInteraction>; _Args = {std::_Bind<sensor_msgs::msg::PointCloud2_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, std::_Bind<sensor_msgs::msg::LaserScan_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.849977] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr_base.h:1342:14:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::_Sp_alloc_shared_tag<_Tp>, _Args&& ...) [with _Alloc = std::allocator<ChinaLidar::LidarInteraction>; _Args = {std::_Bind<sensor_msgs::msg::PointCloud2_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, std::_Bind<sensor_msgs::msg::LaserScan_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}; _Tp = ChinaLidar::LidarInteraction; __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.850066] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:409:59:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>::shared_ptr(std::_Sp_alloc_shared_tag<_Tp>, _Args&& ...) [with _Alloc = std::allocator<ChinaLidar::LidarInteraction>; _Args = {std::_Bind<sensor_msgs::msg::PointCloud2_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, std::_Bind<sensor_msgs::msg::LaserScan_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}; _Tp = ChinaLidar::LidarInteraction]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.850148] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:862:14:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp> std::allocate_shared(const _Alloc&, _Args&& ...) [with _Tp = ChinaLidar::LidarInteraction; _Alloc = std::allocator<ChinaLidar::LidarInteraction>; _Args = {std::_Bind<sensor_msgs::msg::PointCloud2_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, std::_Bind<sensor_msgs::msg::LaserScan_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.850227] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:878:39:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp> std::make_shared(_Args&& ...) [with _Tp = ChinaLidar::LidarInteraction; _Args = {std::_Bind<sensor_msgs::msg::PointCloud2_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, std::_Bind<sensor_msgs::msg::LaserScan_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, long int}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.850330] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:32:75:\x1b[m\x1b[K   required from here\n'}
[2.850420] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/ext/new_allocator.h:162:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[KChinaLidar::LidarInteraction::LidarInteraction(std::_Bind<sensor_msgs::msg::PointCloud2_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, std::_Bind<sensor_msgs::msg::LaserScan_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>&, const std::__cxx11::basic_string<char>&, long int)\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.850506] (china_lidar_driver) StderrLine: {'line': b'  162 |         { \x1b[01;31m\x1b[K::new((void *)__p) _Up(std::forward<_Args>(__args)...)\x1b[m\x1b[K; }\n'}
[2.850582] (china_lidar_driver) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.850656] (china_lidar_driver) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/src/data_reader.cpp:6\x1b[m\x1b[K:\n'}
[2.850732] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/include/china_lidar_driver/lidar_interaction.hpp:39:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[KChinaLidar::LidarInteraction::LidarInteraction(ChinaLidar::LidarInteraction::PCCallback&, ChinaLidar::LidarInteraction::ScanCallback&, const string&, uint32_t)\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.850814] (china_lidar_driver) StderrLine: {'line': b'   39 |     \x1b[01;36m\x1b[KLidarInteraction\x1b[m\x1b[K(PCCallback& point_cloud_cb, ScanCallback& scan_cb\n'}
[2.850889] (china_lidar_driver) StderrLine: {'line': b'      |     \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.850986] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/include/china_lidar_driver/lidar_interaction.hpp:39:34:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<sensor_msgs::msg::PointCloud2_<std::allocator<void> > (DataReader::*(DataReader*, std::_Placeholder<1>))()>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[KChinaLidar::LidarInteraction::PCCallback&\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<std::vector<ChinaLidar::Point2D> >&\x1b[m\x1b[K\xe2\x80\x99}\n'}
[2.851118] (china_lidar_driver) StderrLine: {'line': b'   39 |     LidarInteraction(\x1b[01;36m\x1b[KPCCallback& point_cloud_cb\x1b[m\x1b[K, ScanCallback& scan_cb\n'}
[2.851192] (china_lidar_driver) StderrLine: {'line': b'      |                      \x1b[01;36m\x1b[K~~~~~~~~~~~~^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.851266] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/include/china_lidar_driver/lidar_interaction.hpp:25:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[KChinaLidar::LidarInteraction::LidarInteraction(const ChinaLidar::LidarInteraction&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[2.851342] (china_lidar_driver) StderrLine: {'line': b'   25 | class \x1b[01;36m\x1b[KLidarInteraction\x1b[m\x1b[K\n'}
[2.851414] (china_lidar_driver) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[2.856958] (china_lidar_driver) StderrLine: {'line': b'\x1b[01m\x1b[K/workspaces/gh_mk2/src/china_lidar_driver/include/china_lidar_driver/lidar_interaction.hpp:25:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 1 argument, 4 provided\n'}
[2.907770] (-) TimerEvent: {}
[3.008075] (-) TimerEvent: {}
[3.108342] (-) TimerEvent: {}
[3.122821] (china_lidar_driver) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/data_reader.dir/build.make:76: CMakeFiles/data_reader.dir/src/data_reader.cpp.o] Error 1\n'}
[3.123156] (china_lidar_driver) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:137: CMakeFiles/data_reader.dir/all] Error 2\n'}
[3.123478] (china_lidar_driver) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[3.125044] (china_lidar_driver) CommandEnded: {'returncode': 2}
[3.156144] (china_lidar_driver) JobEnded: {'identifier': 'china_lidar_driver', 'rc': 2}
[3.166526] (-) EventReactorShutdown: {}
